Python 3.6.8 (default, Nov 18 2021, 10:07:16)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44.0.3)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import time
>>> import ipaddress
import pandas as pd
from pysnmp.hlapi import *
from concurrent.futures import ThreadPoolExecutor, as_completed

def scan_network(ip: str) -> pd.DataFrame:
>>> import pandas as pd
    from scapy.all import ARP, Ether, srp
    network = ip  # сетевой адрес
    arp = ARP(pdst=network)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether/arp

    result = srp(packet, timeout=3, verbose=0)[0]

    clients = []
    for sent, received in result:
        clients.append({'Subnet': ip, 'Active_IP': received.psrc})

    df = pd.DataFrame(clients)
    if not df.empty:
        print(f"Active IP addresses on {ip}:")
        print(df.to_string(index=False))
    else:
        print(f"No active IPs found on {ip}")

    return df

networks = ['10.80.52.0/24', '10.80.49.0/24']
active_ips = pd.concat([scan_network(net) for net in networks], ignore_index=True)
print("Network scanning complete.")

SNMP_PORT = 161
SNMP_COMMUNITY = 'gkj[jt50cjj,otcndj'
OID_MODEL = '1.3.6.1.2.1.25.3.2.1.3.1'
OID_SERIAL = '1.3.6.1.2.1.43.5.1.1.17.1'

def check_snmp(host):
    """ Проверяет значение SNMP на указанном хосте """
    try:
        iterator = getCmd(
            SnmpEngine(),
            CommunityData(SNMP_COMMUNITY, mpModel=0),
            UdpTransportTarget((host, SNMP_PORT)),
            ContextData(),
            ObjectType(ObjectIdentity(OID_MODEL)),
            ObjectType(ObjectIdentity(OID_SERIAL))
        )

        error_indication, error_status, error_index, var_binds = next(iterator)

        if error_indication:
            print(f"Error: {error_indication}")
            return None
        elif error_status:
            print(f"Error: {error_status}")
            return None
        else:
            model = var_binds[0][1]
            serial = var_binds[1][1]
            return {'IP Address': host, 'Model': str(model), 'Serial Number': str(serial)}
    except Exception as e:
        print(f"Exception: {e}")
        return None

def find_printers(df):
    """ Находит все сетевые принтеры среди доступных адресов """
    results = []
    with ThreadPoolExecutor(max_workers=256) as executor:
        futures = {executor.submit(check_snmp, row['Active_IP']): row['Active_IP'] for _, row in df.iterrows() if not row['Active_IP'].endswith('.1')}
        for future in as_completed(futures):
            result = future.result()
            if result:
                results.append(result)
    printers_df = pd.DataFrame(results)
    return printers_df

printers_df = find_printers(active_ips)
print(printers_df)
printers_df.to_csv('printers.csv', index=False) # сохр
>>> from pysnmp.hlapi import *
>>> from concurrent.futures import ThreadPoolExecutor, as_completed
>>>
>>> def scan_network(ip: str) -> pd.DataFrame:
...     print(f'''\nScanning Network: {ip}''')
...     from scapy.all import ARP, Ether, srp
...     network = ip  # сетевой адрес
...     arp = ARP(pdst=network)
...     ether = Ether(dst="ff:ff:ff:ff:ff:ff")
...     packet = ether/arp
...
>>>     result = srp(packet, timeout=3, verbose=0)[0]
  File "<stdin>", line 1
    result = srp(packet, timeout=3, verbose=0)[0]
    ^
IndentationError: unexpected indent
>>>
>>>     clients = []
  File "<stdin>", line 1
    clients = []
    ^
IndentationError: unexpected indent
>>>     for sent, received in result:
  File "<stdin>", line 1
    for sent, received in result:
    ^
IndentationError: unexpected indent
>>>         clients.append({'Subnet': ip, 'Active_IP': received.psrc})
  File "<stdin>", line 1
    clients.append({'Subnet': ip, 'Active_IP': received.psrc})
    ^
IndentationError: unexpected indent
>>>
>>>     df = pd.DataFrame(clients)
  File "<stdin>", line 1
    df = pd.DataFrame(clients)
    ^
IndentationError: unexpected indent
>>>     if not df.empty:
  File "<stdin>", line 1
    if not df.empty:
    ^
IndentationError: unexpected indent
>>>         print(f"Active IP addresses on {ip}:")
  File "<stdin>", line 1
    print(f"Active IP addresses on {ip}:")
    ^
IndentationError: unexpected indent
>>>         print(df.to_string(index=False))
  File "<stdin>", line 1
    print(df.to_string(index=False))
    ^
IndentationError: unexpected indent
>>>     else:
  File "<stdin>", line 1
    else:
    ^
IndentationError: unexpected indent
>>>         print(f"No active IPs found on {ip}")
  File "<stdin>", line 1
    print(f"No active IPs found on {ip}")
    ^
IndentationError: unexpected indent
>>>
>>>     return df
  File "<stdin>", line 1
    return df
    ^
IndentationError: unexpected indent
>>>
>>> networks = ['10.80.52.0/24', '10.80.49.0/24']
>>> active_ips = pd.concat([scan_network(net) for net in networks], ignore_index=True)

Scanning Network: 10.80.52.0/24

Scanning Network: 10.80.49.0/24
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/local/lib64/python3.6/site-packages/pandas/core/reshape/concat.py", line 284, in concat
    sort=sort,
  File "/usr/local/lib64/python3.6/site-packages/pandas/core/reshape/concat.py", line 349, in __init__
    raise ValueError("All objects passed were None")
ValueError: All objects passed were None
>>> print("Network scanning complete.")
Network scanning complete.
>>>
>>> SNMP_PORT = 161
>>> SNMP_COMMUNITY = 'gkj[jt50cjj,otcndj'
>>> OID_MODEL = '1.3.6.1.2.1.25.3.2.1.3.1'
>>> OID_SERIAL = '1.3.6.1.2.1.43.5.1.1.17.1'
>>>
>>> def check_snmp(host):
...     """ Проверяет значение SNMP на указанном хосте """
...     try:
...         iterator = getCmd(
...             SnmpEngine(),
...             CommunityData(SNMP_COMMUNITY, mpModel=0),
...             UdpTransportTarget((host, SNMP_PORT)),
...             ContextData(),
...             ObjectType(ObjectIdentity(OID_MODEL)),
...             ObjectType(ObjectIdentity(OID_SERIAL))
...         )
...
  File "<stdin>", line 12

    ^
IndentationError: unexpected unindent
>>>         error_indication, error_status, error_index, var_binds = next(iterator)
  File "<stdin>", line 1
    error_indication, error_status, error_index, var_binds = next(iterator)
    ^
IndentationError: unexpected indent
>>>
>>>         if error_indication:
  File "<stdin>", line 1
    if error_indication:
    ^
IndentationError: unexpected indent
>>>             print(f"Error: {error_indication}")
  File "<stdin>", line 1
    print(f"Error: {error_indication}")
    ^
IndentationError: unexpected indent
>>>             return None
  File "<stdin>", line 1
    return None
    ^
IndentationError: unexpected indent
>>>         elif error_status:
  File "<stdin>", line 1
    elif error_status:
    ^
IndentationError: unexpected indent
>>>             print(f"Error: {error_status}")
  File "<stdin>", line 1
    print(f"Error: {error_status}")
    ^
IndentationError: unexpected indent
>>>             return None
  File "<stdin>", line 1
    return None
    ^
IndentationError: unexpected indent
>>>         else:
  File "<stdin>", line 1
    else:
    ^
IndentationError: unexpected indent
>>>             model = var_binds[0][1]
  File "<stdin>", line 1
    model = var_binds[0][1]
    ^
IndentationError: unexpected indent
>>>             serial = var_binds[1][1]
  File "<stdin>", line 1
    serial = var_binds[1][1]
    ^
IndentationError: unexpected indent
>>>             return {'IP Address': host, 'Model': str(model), 'Serial Number': str(serial)}
  File "<stdin>", line 1
    return {'IP Address': host, 'Model': str(model), 'Serial Number': str(serial)}
    ^
IndentationError: unexpected indent
>>>     except Exception as e:
  File "<stdin>", line 1
    except Exception as e:
    ^
IndentationError: unexpected indent
>>>         print(f"Exception: {e}")
  File "<stdin>", line 1
    print(f"Exception: {e}")
    ^
IndentationError: unexpected indent
>>>         return None
  File "<stdin>", line 1
    return None
    ^
IndentationError: unexpected indent
>>>
>>> def find_printers(df):
...     """ Находит все сетевые принтеры среди доступных адресов """
...     results = []
...     with ThreadPoolExecutor(max_workers=256) as executor:
...         futures = {executor.submit(check_snmp, row['Active_IP']): row['Active_IP'] for _, row in df.iterrows() if not row['Active_IP'].endswith('.1')}
...         for future in as_completed(futures):
...             result = future.result()
...             if result:
...                 results.append(result)
...     printers_df = pd.DataFrame(results)
...     return printers_df
...
>>> printers_df = find_printers(active_ips)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'active_ips' is not defined
>>> print(printers_df)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'printers_df' is not defined
>>> printers_df.to_csv('printers.csv', index=False) # сохр
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'printers_df' is not defined
>>>
